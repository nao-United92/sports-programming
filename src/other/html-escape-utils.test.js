import { escape, unescape } from './html-escape-utils.js';describe('HTML Escape/Unescape Utilities', () => {  const unescapedString = 'fred, barney, & pebbles';  const escapedString = 'fred, barney, &amp; pebbles';  const complexUnescaped = '<div class="test">'hello & world'</div>';  const complexEscaped = '&lt;div class=&quot;test&quot;&gt;&#39;hello &amp; world&#39;&lt;/div&gt;';  describe('escape', () => {    it('should escape special HTML characters', () => {      expect(escape(unescapedString)).toBe(escapedString);    });    it('should handle a more complex string', () => {      expect(escape(complexUnescaped)).toBe(complexEscaped);    });    it('should return the original string if no special characters are present', () => {      const str = 'hello world';      expect(escape(str)).toBe(str);    });    it('should handle null or undefined input', () => {      expect(escape(null)).toBe(null);      expect(escape(undefined)).toBe(undefined);    });  });  describe('unescape', () => {    it('should unescape special HTML entities', () => {      expect(unescape(escapedString)).toBe(unescapedString);    });    it('should handle a more complex string', () => {      expect(unescape(complexEscaped)).toBe(complexUnescaped);    });    it('should return the original string if no entities are present', () => {      const str = 'hello world';      expect(unescape(str)).toBe(str);    });    it('should handle null or undefined input', () => {      expect(unescape(null)).toBe(null);      expect(unescape(undefined)).toBe(undefined);    });  });});