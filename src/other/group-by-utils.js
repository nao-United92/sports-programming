/**
 * Creates an object with keys generated by running each element of collection thru iteratee.
 * The order of grouped values is determined by the order they occur in collection.
 * The corresponding value of each key is an array of elements responsible for generating the key.
 *
 * @param {Array} collection The collection to iterate over.
 * @param {Function|string} iteratee The iteratee to transform keys.
 * @returns {Object} Returns the composed aggregate object.
 */
export function groupBy(collection, iteratee) {
  if (collection == null) {
    return {};
  }

  const getIteratee = (value) => {
    if (typeof iteratee === 'function') {
      return iteratee(value);
    }
    if (typeof iteratee === 'string') {
      return value[iteratee];
    }
    return value;
  };

  return collection.reduce((acc, item) => {
    const key = getIteratee(item);
    if (!acc[key]) {
      acc[key] = [];
    }
    acc[key].push(item);
    return acc;
  }, {});
}
