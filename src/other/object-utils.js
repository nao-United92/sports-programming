/**
 * Creates an object with the same values as the provided object and keys generated by running each own enumerable string keyed property of the object through the iteratee.
 * @param {object} obj The object to iterate over.
 * @param {Function} fn The iteratee to transform keys.
 * @returns {object} Returns the new object.
 */
export const mapKeys = (obj, fn) =>
  Object.keys(obj).reduce((acc, key) => {
    acc[fn(obj[key], key, obj)] = obj[key];
    return acc;
  }, {});

/**
 * Creates an object with the same keys as the provided object and values generated by running each own enumerable string keyed property of the object through the iteratee.
 * @param {object} obj The object to iterate over.
 * @param {Function} fn The iteratee to transform values.
 * @returns {object} Returns the new object.
 */
export const mapValues = (obj, fn) =>
  Object.keys(obj).reduce((acc, key) => {
    acc[key] = fn(obj[key], key, obj);
    return acc;
  }, {});
